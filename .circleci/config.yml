version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.1
  jq: circleci/jq@2.2.0

jobs:
  delete-existing-image:
    executor: aws-cli/default
    steps:
      - jq/install
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Delete all existing docker image
          command: >
            aws ecr batch-delete-image --region ap-southeast-3 \
              --repository-name contact-repository \
              --image-ids "$(aws ecr list-images --region ap-southeast-3 --repository-name contact-repository --query 'imageIds[*]' --output json)" || true
  verify-deployment:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition contact-app \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
            "$BASH_ENV"
      - aws-ecs/verify-revision-is-deployed:
          family: "contact-app"
          cluster: "contact-app-cluster"
          service-name: "contact-app-service"
          task-definition-arn: "${TASK_DEFINITION_ARN}"
  stop-existing-task:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Stop all existing task
          command: ./scripts/stop-all-task.sh
  run-new-task-revision:
    executor: aws-cli/default
    steps:
      - jq/install
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get cluster info
          command: |
            SERVICES_OBJ=$(aws ecs describe-services --cluster "${ECS_CLUSTER_NAME}" --services "${ECS_SERVICE_NAME}")
            VPC_CONF_OBJ=$(echo $SERVICES_OBJ | jq '.services[].networkConfiguration.awsvpcConfiguration')
            SUBNET_ONE=$(echo "$VPC_CONF_OBJ" | jq '.subnets[0]')
            SUBNET_TWO=$(echo "$VPC_CONF_OBJ" | jq '.subnets[1]')
            SECURITY_GROUP_IDS=$(echo "$VPC_CONF_OBJ" | jq '.securityGroups[0]')
            CLUSTER_NAME=$(echo "$SERVICES_OBJ" | jq '.services[].clusterArn')
            echo "export SUBNET_ONE=$SUBNET_ONE" >> "$BASH_ENV"
            echo "export SUBNET_TWO=$SUBNET_TWO" >> "$BASH_ENV"
            echo "export SECURITY_GROUP_IDS=$SECURITY_GROUP_IDS" >> "$BASH_ENV"
            echo "export CLUSTER_NAME=$CLUSTER_NAME" >> "$BASH_ENV"
      - run:
          name: Get new task definition revision
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition contact-app \
                --env-file arn:aws:s3:::contact-app-ap-southeast-3/.env \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
            "$BASH_ENV" \
            echo $TASK_DEFINITION_ARN
      - run:
          name: Associate cluster
          command: |
            aws ecs put-cluster-capacity-providers \
              --cluster "${ECS_CLUSTER_NAME}" \
              --capacity-providers FARGATE FARGATE_SPOT  \
              --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1 capacityProvider=FARGATE_SPOT,weight=1\
              --region ${AWS_DEFAULT_REGION}
      - aws-ecs/run-task:
          cluster: $CLUSTER_NAME
          capacity-provider-strategy: capacityProvider=FARGATE,weight=1 capacityProvider=FARGATE_SPOT,weight=1
          launch-type: ""
          task-definition: $TASK_DEFINITION_ARN
          subnet-ids: "$SUBNET_ONE, $SUBNET_TWO"
          security-group-ids: $SECURITY_GROUP_IDS
          assign-public-ip: ENABLED
          count: 1

workflows:
  build-and-deploy:
    jobs:
      - delete-existing-image
      - aws-ecr/build-and-push-image:
          requires:
            - delete-existing-image
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          registry-id: ACCOUNT_ID
          aws-cli-version: latest
          dockerfile: Dockerfile
          executor: aws-ecr/default
          region: "${AWS_DEFAULT_REGION}"
          repo: "${MY_REPO}"
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: "contact-app"
          cluster: "contact-app-cluster"
          service-name: "contact-app-service"
          container-image-name-updates: "container=contact-app,tag=${CIRCLE_SHA1}"
      - verify-deployment:
          requires:
            - aws-ecs/deploy-service-update
      - stop-existing-task:
          requires:
            - verify-deployment
      - run-new-task-revision:
          requires:
            - stop-existing-task
